// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using coptic_app_backend.Infrastructure.Data;

#nullable disable

namespace coptic_app_backend.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250912080521_AddFileUploadEntities")]
    partial class AddFileUploadEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("coptic_app_backend.Domain.Models.ChatConversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AbuneId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("LastMessageAt")
                        .HasColumnType("bigint");

                    b.Property<string>("LastMessageContent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("LastMessageType")
                        .HasColumnType("integer");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("integer");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("AbuneId");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastMessageAt");

                    b.HasIndex("UserId");

                    b.ToTable("ChatConversations");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AbuneId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<long?>("EditedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("EditedBy")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ForwardedFromMessageId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<bool>("IsBroadcast")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<string>("Reactions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ReadStatus")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ReplyToMessageId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<int?>("VoiceDuration")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbuneId");

                    b.HasIndex("ForwardedFromMessageId");

                    b.HasIndex("IsBroadcast");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MessageType");

                    b.HasIndex("RecipientId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Status");

                    b.HasIndex("Timestamp");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.FileUpload", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AbuneId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FolderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChunkedUpload")
                        .HasColumnType("boolean");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("UploadSessionId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<long>("UploadedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("AbuneId");

                    b.HasIndex("FolderId");

                    b.HasIndex("IsActive");

                    b.HasIndex("MediaType");

                    b.HasIndex("Status");

                    b.HasIndex("UploadSessionId");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UploadedBy");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.Folder", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AbuneId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbuneId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastModified");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("SortOrder");

                    b.HasIndex("Name", "ParentId", "AbuneId")
                        .IsUnique()
                        .HasFilter("IsActive = true");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.UploadSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AbuneId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Dictionary<int, string>>("CompletedChunkETags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("CompletedChunks")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FolderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<long>("LastActivity")
                        .HasColumnType("bigint");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("MinioUploadId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalChunks")
                        .HasColumnType("integer");

                    b.Property<long>("TotalSize")
                        .HasColumnType("bigint");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("AbuneId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FolderId");

                    b.HasIndex("LastActivity");

                    b.HasIndex("MediaType");

                    b.HasIndex("Status");

                    b.HasIndex("UploadedBy");

                    b.ToTable("UploadSessions");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AbuneId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<long?>("ApprovedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ChurchName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<long>("LastModified")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AbuneId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsApproved");

                    b.HasIndex("UserStatus");

                    b.HasIndex("UserType");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.ChatConversation", b =>
                {
                    b.HasOne("coptic_app_backend.Domain.Models.User", "Abune")
                        .WithMany()
                        .HasForeignKey("AbuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Abune");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.ChatMessage", b =>
                {
                    b.HasOne("coptic_app_backend.Domain.Models.User", "Abune")
                        .WithMany()
                        .HasForeignKey("AbuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.ChatMessage", "ForwardedFromMessage")
                        .WithMany()
                        .HasForeignKey("ForwardedFromMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("coptic_app_backend.Domain.Models.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.ChatMessage", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("coptic_app_backend.Domain.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Abune");

                    b.Navigation("ForwardedFromMessage");

                    b.Navigation("Recipient");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.FileUpload", b =>
                {
                    b.HasOne("coptic_app_backend.Domain.Models.User", "Abune")
                        .WithMany()
                        .HasForeignKey("AbuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Abune");

                    b.Navigation("Folder");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.Folder", b =>
                {
                    b.HasOne("coptic_app_backend.Domain.Models.User", "Abune")
                        .WithMany()
                        .HasForeignKey("AbuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Abune");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.UploadSession", b =>
                {
                    b.HasOne("coptic_app_backend.Domain.Models.User", "Abune")
                        .WithMany()
                        .HasForeignKey("AbuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("coptic_app_backend.Domain.Models.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Abune");

                    b.Navigation("Folder");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.User", b =>
                {
                    b.HasOne("coptic_app_backend.Domain.Models.User", "Abune")
                        .WithMany()
                        .HasForeignKey("AbuneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Abune");
                });

            modelBuilder.Entity("coptic_app_backend.Domain.Models.Folder", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
