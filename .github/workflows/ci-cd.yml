name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  POSTGRES_DB: coptic_app_test
  POSTGRES_USER: coptic_user_test
  POSTGRES_PASSWORD: test_password

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore coptic_app_backend.Api/coptic_app_backend.Api.csproj
        dotnet restore coptic_app_backend.Application/coptic_app_backend.Application.csproj
        dotnet restore coptic_app_backend.Domain/coptic_app_backend.Domain.csproj
        dotnet restore coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj

    - name: Build
      run: |
        dotnet build coptic_app_backend.Api/coptic_app_backend.Api.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Application/coptic_app_backend.Application.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Domain/coptic_app_backend.Domain.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj --no-restore --configuration Release

    - name: Test
      run: |
        dotnet test --no-build --verbosity normal --configuration Release
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: yohannestesfaye21
        password: ${{ secrets.PAT_TOKEN }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ghcr.io/yohannestesfaye21/coptic-backend:latest
          ghcr.io/yohannestesfaye21/coptic-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy and Restart Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          set -e
          echo "üöÄ Starting final, robust deployment..."
          DEPLOY_DIR="/root/coptic-app-backend"
          
          # Install jq if not available for JSON validation
          if ! command -v jq >/dev/null 2>&1; then
            echo "üì¶ Installing jq for JSON validation..."
            apt-get update && apt-get install -y jq
          fi
          
          # 1. Ensure directories exist
          mkdir -p $DEPLOY_DIR/firebase
          cd $DEPLOY_DIR
          
          # 2. Write credential files from secrets 
          echo "üî• Writing Firebase credential files..."
          
          # The secret appears to be malformed JSON (missing quotes), so we need to reconstruct it
          echo "‚ö†Ô∏è Detected malformed JSON in secret, reconstructing..."
          
          # Write the raw secret to a temp file for processing
          echo "${{ secrets.FCM_SERVICE_ACCOUNT_JSON }}" > /tmp/raw_secret.txt
          
          # Use Python to properly reconstruct the JSON
          python3 -c "
import json
import re

def reconstruct_firebase_json(input_file, output_file):
    '''Reconstruct malformed Firebase JSON from GitHub secrets'''
    try:
        with open(input_file, 'r') as f:
            content = f.read().strip()
        
        if not content:
            raise ValueError("Empty secret content")
        
        # Try to parse as JSON first (in case it's actually valid)
        try:
            data = json.loads(content)
            print('‚úÖ Secret is already valid JSON')
            with open(output_file, 'w') as f:
                json.dump(data, f, indent=2)
            return True
        except json.JSONDecodeError:
            print('‚ö†Ô∏è Secret is not valid JSON, reconstructing...')
            
            # Extract values using regex patterns
            patterns = {
                'type': r'type:\s*([^,\n]+)',
                'project_id': r'project_id:\s*([^,\n]+)',
                'private_key_id': r'private_key_id:\s*([^,\n]+)',
                'client_email': r'client_email:\s*([^,\n]+)',
                'client_id': r'client_id:\s*([^,\n]+)',
                'auth_uri': r'auth_uri:\s*([^,\n]+)',
                'token_uri': r'token_uri:\s*([^,\n]+)',
                'auth_provider_x509_cert_url': r'auth_provider_x509_cert_url:\s*([^,\n]+)',
                'client_x509_cert_url': r'client_x509_cert_url:\s*([^,\n]+)'
            }
            
            # Extract private key (special handling)
            private_key_match = re.search(r'private_key:\s*(-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)', content, re.DOTALL)
            
            # Build the JSON object
            data = {}
            missing_fields = []
            
            for key, pattern in patterns.items():
                match = re.search(pattern, content)
                if match:
                    value = match.group(1).strip()
                    data[key] = value
                else:
                    missing_fields.append(key)
            
            # Handle private key specially
            if private_key_match:
                private_key = private_key_match.group(1).strip()
                # Fix newlines in private key - simplified approach
                private_key = private_key.replace('\\n', '\n')  # Handle escaped newlines
                data['private_key'] = private_key
            else:
                missing_fields.append('private_key')
            
            # Validate we have essential fields
            essential_fields = ['type', 'project_id', 'private_key', 'client_email']
            missing_essential = [field for field in essential_fields if field not in data]
            
            if missing_essential:
                raise ValueError(f"Missing essential fields: {missing_essential}")
            
            if missing_fields:
                print(f"‚ö†Ô∏è Missing optional fields: {missing_fields}")
            
            # Validate the reconstructed JSON
            try:
                json.dumps(data)  # Test if it's valid JSON
            except (TypeError, ValueError) as e:
                raise ValueError(f"Reconstructed data is not valid JSON: {e}")
            
            # Write the reconstructed JSON
            with open(output_file, 'w') as f:
                json.dump(data, f, indent=2)
            
            print('‚úÖ JSON reconstructed successfully')
            print(f'‚úÖ Reconstructed fields: {list(data.keys())}')
            return True
            
    except Exception as e:
        print(f'‚ùå Failed to reconstruct Firebase JSON: {e}')
        return False

# Reconstruct the Firebase service account JSON
if not reconstruct_firebase_json('/tmp/raw_secret.txt', '$DEPLOY_DIR/firebase/service-account.json'):
    print('‚ùå Firebase JSON reconstruction failed - aborting deployment')
    exit(1)
"

          # Clean up temp file
          rm -f /tmp/raw_secret.txt
          
          # Write other files normally
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | sed 's/\\n/\n/g' > "$DEPLOY_DIR/firebase/google-services.json"
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}" | sed 's/\\n/\n/g' > "$DEPLOY_DIR/firebase/GoogleService-Info.plist"

          # Set strict permissions for the service account file
          chmod 600 "$DEPLOY_DIR/firebase/service-account.json"

          # Validate JSON files
          echo "üîç Validating JSON files..."
          if command -v jq >/dev/null 2>&1; then
            if jq empty "$DEPLOY_DIR/firebase/service-account.json" 2>/dev/null; then
              echo "‚úÖ service-account.json is valid JSON (jq validation)"
            else
              echo "‚ùå service-account.json is invalid JSON (jq validation failed)"
              echo "First 500 characters:"
              head -c 500 "$DEPLOY_DIR/firebase/service-account.json"
            fi
          else
            echo "‚ö†Ô∏è jq not available, trying python3 json validation..."
            if python3 -m json.tool "$DEPLOY_DIR/firebase/service-account.json" >/dev/null 2>&1; then
              echo "‚úÖ service-account.json is valid JSON (python3 validation)"
            else
              echo "‚ùå service-account.json is invalid JSON (python3 validation failed)"
            fi
          fi

          echo "‚úÖ Firebase files created."
          ls -la "$DEPLOY_DIR/firebase"


          # 3. Authenticate & Restart Docker
          echo "üîê Authenticating and restarting services..."
          echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u yohannestesfaye21 --password-stdin
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
          
          echo "‚úÖ Deployment complete."

    - name: Health check
      run: |
        echo "üîç Performing health check..."
        
        # Wait for services to start
        echo "‚è≥ Waiting for services to start..."
        sleep 30
        
        # Check if the API is responding
        echo "üåê Checking API health endpoint..."
        if curl -f -s --max-time 30 http://${{ secrets.SERVER_HOST }}:5000/health >/dev/null 2>&1; then
          echo "‚úÖ API health check passed"
        else
          echo "‚ùå API health check failed - checking container status..."
          # Try to get container logs for debugging
          echo "Container logs:"
          docker logs coptic_api_prod --tail 20 || echo "Could not retrieve container logs"
          exit 1
        fi
        
        # Check if Firebase is properly initialized
        echo "üî• Checking Firebase initialization..."
        if docker logs coptic_api_prod 2>&1 | grep -q "Firebase initialized successfully"; then
          echo "‚úÖ Firebase initialization confirmed"
        else
          echo "‚ö†Ô∏è Firebase initialization not confirmed - checking logs..."
          docker logs coptic_api_prod 2>&1 | grep -i firebase || echo "No Firebase logs found"
        fi
        
        echo "‚úÖ Health check completed successfully!"
