name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  POSTGRES_DB: coptic_app_test
  POSTGRES_USER: coptic_user_test
  POSTGRES_PASSWORD: test_password

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore coptic_app_backend.Api/coptic_app_backend.Api.csproj
        dotnet restore coptic_app_backend.Application/coptic_app_backend.Application.csproj
        dotnet restore coptic_app_backend.Domain/coptic_app_backend.Domain.csproj
        dotnet restore coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj

    - name: Build
      run: |
        dotnet build coptic_app_backend.Api/coptic_app_backend.Api.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Application/coptic_app_backend.Application.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Domain/coptic_app_backend.Domain.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj --no-restore --configuration Release

    - name: Test
      run: |
        dotnet test --no-build --verbosity normal --configuration Release
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: yohannestesfaye21
        password: ${{ secrets.PAT_TOKEN }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ghcr.io/yohannestesfaye21/coptic-backend:latest
          ghcr.io/yohannestesfaye21/coptic-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy and Restart Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          set -e
          echo "🚀 Starting final, robust deployment..."
          DEPLOY_DIR="/root/coptic-app-backend"
          
          # Install jq if not available for JSON validation
          if ! command -v jq >/dev/null 2>&1; then
            echo "📦 Installing jq for JSON validation..."
            apt-get update && apt-get install -y jq
          fi
          
          # 1. Ensure directories exist
          mkdir -p $DEPLOY_DIR/firebase
          cd $DEPLOY_DIR
          
          # 2. Write credential files from secrets 
          echo "🔥 Writing Firebase credential files..."
          
          # Simply write the secret as-is - let Program.cs handle malformed JSON
          echo "${{ secrets.FCM_SERVICE_ACCOUNT_JSON }}" > "$DEPLOY_DIR/firebase/service-account.json"
          
          # Write other files normally
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | sed 's/\\n/\n/g' > "$DEPLOY_DIR/firebase/google-services.json"
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}" | sed 's/\\n/\n/g' > "$DEPLOY_DIR/firebase/GoogleService-Info.plist"

          # Set strict permissions for the service account file
          chmod 600 "$DEPLOY_DIR/firebase/service-account.json"

          # Validate JSON files
          echo "🔍 Validating JSON files..."
          if command -v jq >/dev/null 2>&1; then
            if jq empty "$DEPLOY_DIR/firebase/service-account.json" 2>/dev/null; then
              echo "✅ service-account.json is valid JSON (jq validation)"
            else
              echo "❌ service-account.json is invalid JSON (jq validation failed)"
              echo "First 500 characters:"
              head -c 500 "$DEPLOY_DIR/firebase/service-account.json"
            fi
          else
            echo "⚠️ jq not available, trying python3 json validation..."
            if python3 -m json.tool "$DEPLOY_DIR/firebase/service-account.json" >/dev/null 2>&1; then
              echo "✅ service-account.json is valid JSON (python3 validation)"
            else
              echo "❌ service-account.json is invalid JSON (python3 validation failed)"
            fi
          fi

          echo "✅ Firebase files created."
          ls -la "$DEPLOY_DIR/firebase"


          # 3. Authenticate & Restart Docker
          echo "🔐 Authenticating and restarting services..."
          echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u yohannestesfaye21 --password-stdin
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
          
          echo "✅ Deployment complete."

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          echo "🔍 Performing health check..."
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Check if the API is responding
          echo "🌐 Checking API health endpoint..."
          if curl -f -s --max-time 30 http://localhost:5000/health >/dev/null 2>&1; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed - checking container status..."
            # Try to get container logs for debugging
            echo "Container logs:"
            docker logs coptic_api_prod --tail 20 || echo "Could not retrieve container logs"
            exit 1
          fi
          
          # Check if Firebase is properly initialized
          echo "🔥 Checking Firebase initialization..."
          if docker logs coptic_api_prod 2>&1 | grep -q "Firebase initialized successfully"; then
            echo "✅ Firebase initialization confirmed"
          else
            echo "⚠️ Firebase initialization not confirmed - checking logs..."
            docker logs coptic_api_prod 2>&1 | grep -i firebase || echo "No Firebase logs found"
          fi
          
          echo "✅ Health check completed successfully!"
