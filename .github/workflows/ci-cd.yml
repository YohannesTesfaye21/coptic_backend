name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  POSTGRES_DB: coptic_app_test
  POSTGRES_USER: coptic_user_test
  POSTGRES_PASSWORD: test_password

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore coptic_app_backend.Api/coptic_app_backend.Api.csproj
        dotnet restore coptic_app_backend.Application/coptic_app_backend.Application.csproj
        dotnet restore coptic_app_backend.Domain/coptic_app_backend.Domain.csproj
        dotnet restore coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj

    - name: Build
      run: |
        dotnet build coptic_app_backend.Api/coptic_app_backend.Api.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Application/coptic_app_backend.Application.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Domain/coptic_app_backend.Domain.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj --no-restore --configuration Release

    - name: Test
      run: |
        dotnet test --no-build --verbosity normal --configuration Release
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: yohannestesfaye21
        password: ${{ secrets.PAT_TOKEN }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ghcr.io/yohannestesfaye21/coptic-backend:latest
          ghcr.io/yohannestesfaye21/coptic-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy and Restart Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          set -e
          echo "üöÄ Starting final, robust deployment..."
          DEPLOY_DIR="/root/coptic-app-backend"
          
          # 1. Ensure directories exist
          mkdir -p $DEPLOY_DIR/firebase
          cd $DEPLOY_DIR
          
          # 2. Write credential files from secrets (using base64 for safe transport)
          echo "üî• Writing Firebase credential files..."
          echo "${{ secrets.FCM_SERVICE_ACCOUNT_JSON }}" | base64 -d > $DEPLOY_DIR/firebase/service-account.json
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > $DEPLOY_DIR/firebase/google-services.json
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}" | base64 -d > $DEPLOY_DIR/firebase/GoogleService-Info.plist
          chmod 600 $DEPLOY_DIR/firebase/service-account.json
          echo "‚úÖ Firebase files created."
          ls -la $DEPLOY_DIR/firebase

          # 3. Authenticate & Restart Docker
          echo "üîê Authenticating and restarting services..."
          echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u yohannestesfaye21 --password-stdin
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
          
          echo "‚úÖ Deployment complete."

    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check logic here
        # This could be checking if the application is responding
        echo "Health check completed!"
