name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  POSTGRES_DB: coptic_app_test
  POSTGRES_USER: coptic_user_test
  POSTGRES_PASSWORD: test_password

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore coptic_app_backend.Api/coptic_app_backend.Api.csproj
        dotnet restore coptic_app_backend.Application/coptic_app_backend.Application.csproj
        dotnet restore coptic_app_backend.Domain/coptic_app_backend.Domain.csproj
        dotnet restore coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj

    - name: Build
      run: |
        dotnet build coptic_app_backend.Api/coptic_app_backend.Api.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Application/coptic_app_backend.Application.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Domain/coptic_app_backend.Domain.csproj --no-restore --configuration Release
        dotnet build coptic_app_backend.Infrastructure/coptic_app_backend.Infrastructure.csproj --no-restore --configuration Release

    - name: Test
      run: |
        dotnet test --no-build --verbosity normal --configuration Release
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"

    - name: Build Docker image
      run: docker build -t coptic-backend:${{ github.sha }} .

    - name: Upload Docker image to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag coptic-backend:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/coptic_backend:latest
        docker tag coptic-backend:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/coptic_backend:${{ github.sha }}
        docker push ghcr.io/${{ github.repository_owner }}/coptic_backend:latest
        docker push ghcr.io/${{ github.repository_owner }}/coptic_backend:${{ github.sha }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          echo "üöÄ Starting deployment..."
          
          # Ensure SSH access is preserved in firewall
          echo "üõ°Ô∏è  Configuring firewall safely..."
          ufw allow ssh || ufw allow 22/tcp
          ufw allow 80/tcp
          ufw allow 443/tcp
          ufw allow 5000/tcp
          ufw --force enable
          
          # Verify SSH is still accessible
          echo "üîç Verifying SSH access..."
          ufw status | grep -E "(22|ssh)" || echo "‚ö†Ô∏è  SSH port not found in firewall rules"
          
          # Create app directory if it doesn't exist
          mkdir -p ~/coptic-app-backend
          cd ~/coptic-app-backend
          
          # Copy environment file
          echo "üìã Setting up environment..."
          cp env.production .env || echo "‚ö†Ô∏è  env.production not found, using existing .env"
          
          # Pull latest changes if git repo exists
          if [ -d ".git" ]; then
            echo "üì• Pulling latest changes..."
            git pull origin main
          else
            echo "üìÅ No git repo found, continuing with deployment"
          fi
          
          # Pull latest Docker images
          echo "üê≥ Pulling latest Docker images..."
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop existing services
          echo "üõë Stopping existing services..."
          docker-compose -f docker-compose.prod.yml down
          
          # Start services with new images
          echo "üöÄ Starting services..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Check service status
          echo "üîç Checking service status..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Run database migrations if needed
          echo "üóÑÔ∏è  Running database migrations..."
          docker-compose -f docker-compose.prod.yml exec -T api dotnet ef database update || echo "Migrations completed or no migrations needed"
          
          # Configure Nginx if needed
          echo "üåê Configuring Nginx..."
          if [ ! -f /etc/nginx/sites-enabled/coptic-app ]; then
            echo "üìù Setting up Nginx configuration..."
            cp nginx-simple.conf /etc/nginx/sites-available/coptic-app
            ln -sf /etc/nginx/sites-available/coptic-app /etc/nginx/sites-enabled/
            nginx -t && systemctl reload nginx
          fi
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Your app should be accessible at:"
          echo "   - Direct: http://${{ secrets.SERVER_HOST }}:5000"
          echo "   - Proxy: http://${{ secrets.SERVER_HOST }}"
          echo "   - Swagger: http://${{ secrets.SERVER_HOST }}/swagger"

    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check logic here
        # This could be checking if the application is responding
        echo "Health check completed!"
